{"componentChunkName":"component---src-templates-blog-post-js","path":"/关于 For 循环、Array reduce、链式调用的使用对比/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"4f6dfeca-efb6-5389-85dd-a9023f2f17c0","excerpt":"For loops 循环 任何  循环都可以使用 - 查看 JavaScript 循环的区别。 现在很少见，因为函数式编程更加流行。 对迭代进行控制，例如跳过某一项或者提前。 结果数组需要在循环外部被事先声明。 使用  或者展开表达式 () 用于添加元素。  复杂度，每一项只会被迭代一次。 Array reduce…","html":"<p><strong>For loops</strong> 循环</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> files <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'foo.txt '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.bar'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'   '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'baz.foo'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> filePaths <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> file <span class=\"token keyword\">of</span> files<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> fileName <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> filePath <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">~/cool_app/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>fileName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    filePaths<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// filePaths = [ '~/cool_app/foo.txt', '~/cool_app/.bar', '~/cool_app/baz.foo']</span></code></pre></div>\n<ul>\n<li>任何 <code class=\"language-text\">for</code> 循环都可以使用 - <a href=\"/blog/s/javascript-for-in-for-of-foreach/\">查看 JavaScript 循环的区别</a>。</li>\n<li>现在很少见，因为函数式编程更加流行。</li>\n<li>对迭代进行控制，例如跳过某一项或者提前<code class=\"language-text\">返回</code>。</li>\n<li>结果数组需要在循环外部被事先声明。</li>\n<li>使用 <code class=\"language-text\">Array.prototype.push()</code> 或者展开表达式 (<code class=\"language-text\">...</code>) 用于添加元素。</li>\n<li><code class=\"language-text\">O(N)</code> 复杂度，每一项只会被迭代一次。</li>\n</ul>\n<p><strong>Array reduce</strong> 数组归纳</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> files <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'foo.txt '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.bar'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'   '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'baz.foo'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> filePaths <span class=\"token operator\">=</span> files<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> file</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> fileName <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> filePath <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">~/cool_app/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>fileName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    acc<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> acc<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// filePaths = [ '~/cool_app/foo.txt', '~/cool_app/.bar', '~/cool_app/baz.foo']</span></code></pre></div>\n<ul>\n<li>使用 <code class=\"language-text\">Array.prototype.reduce()</code> 将一个空数组作为初始值。</li>\n<li>现在更加普遍，因为函数式编程更加流行。</li>\n<li>对迭代的控制更少，不能跳过某一项或者提前返回。</li>\n<li>如有必要，可以通过其他方法链接。</li>\n<li>使用 <code class=\"language-text\">Array.prototype.push()</code> 或者展开表达式 (<code class=\"language-text\">...</code>) 用于添加元素。</li>\n<li><code class=\"language-text\">O(N)</code> 复杂度，每一项只会被迭代一次。</li>\n</ul>\n<p><strong>Method chaining</strong> 链式方法</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> files <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'foo.txt '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.bar'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'   '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'baz.foo'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> filePaths <span class=\"token operator\">=</span> files\n  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">file</span> <span class=\"token operator\">=></span> file<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>Boolean<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fileName</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">~/cool_app/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>fileName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// filePaths = [ '~/cool_app/foo.txt', '~/cool_app/.bar', '~/cool_app/baz.foo']</span></code></pre></div>\n<ul>\n<li>使用 <code class=\"language-text\">Array.prototype.map()</code> 和 <code class=\"language-text\">Array.prototype.filter()</code>.</li>\n<li>现在更加普遍，因为函数式编程更加流行。</li>\n<li>对迭代的控制更少，不能跳过某一项或者提前返回。</li>\n<li>声明式，更容易阅读和重构，链可根据需要拓展。</li>\n<li>不使用 <code class=\"language-text\">Array.prototype.push()</code> 或者展开 (<code class=\"language-text\">...</code>) 操作符.</li>\n<li><code class=\"language-text\">O(cN)</code> 复杂度, <code class=\"language-text\">c</code> 为每一项的迭代, (<code class=\"language-text\">c</code>: 链的长度).</li>\n</ul>\n<p><strong>Image credit:</strong> <a href=\"https://unsplash.com/@windows?utm_source=unsplash&#x26;utm_medium=referral&#x26;utm_content=creditCopyText\">Windows</a> on <a href=\"https://unsplash.com/s/photos/code?utm_source=unsplash&#x26;utm_medium=referral&#x26;utm_content=creditCopyText\">Unsplash</a></p>","frontmatter":{"title":"关于 For 循环、Array reduce、链式调用的使用对比","date":"May 28, 2015","description":"This is a custom description for SEO and Open Graph purposes, rather than the default generated excerpt. Simply add a description field to the frontmatter."}}},"pageContext":{"slug":"/关于 For 循环、Array reduce、链式调用的使用对比/","previous":{"fields":{"slug":"/my-second-post/"},"frontmatter":{"title":"My Second Post!"}},"next":null}}}